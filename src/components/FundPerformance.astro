---
import type { FundAssetFilter } from '../types/fund';

interface Props {
  initialFilter?: FundAssetFilter;
  pageSize?: number;
  showFilters?: boolean;
  showActionCol?: boolean;
}

const {
  initialFilter = 'ALL',
  pageSize = 20,
  showFilters = true,
  showActionCol = false,
} = Astro.props;
---

<div
  class="fund-performance-container"
  data-initial-filter={initialFilter}
  data-page-size={pageSize}
  data-show-action-col={String(showActionCol)}
>
  {
    showFilters && (
      <div class="mb-6 flex flex-wrap gap-3">
        <button
          class="filter-btn rounded-lg px-6 py-2 font-medium transition-all duration-200"
          data-filter="ALL"
        >
          Tất cả
        </button>
        <button
          class="filter-btn rounded-lg px-6 py-2 font-medium transition-all duration-200"
          data-filter="STOCK"
        >
          Quỹ cổ phiếu
        </button>
        <button
          class="filter-btn rounded-lg px-6 py-2 font-medium transition-all duration-200"
          data-filter="BOND"
        >
          Quỹ trái phiếu
        </button>
      </div>
    )
  }

  <div class="loading-state mb-4 text-center">
    <div
      class="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-orange-500 border-r-transparent"
    >
    </div>
    <p class="mt-2 text-gray-600 dark:text-gray-400">Đang tải dữ liệu...</p>
  </div>

  <div
    class="error-state mb-4 hidden rounded-lg bg-red-50 p-4 text-red-800 dark:bg-red-900/20 dark:text-red-400"
  >
    <p class="error-message"></p>
  </div>

  <div class="funds-container hidden">
    <div
      class="overflow-x-auto rounded-lg border border-gray-200 dark:border-gray-700"
    >
      <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
        <thead class="bg-gray-50 dark:bg-gray-800">
          <tr>
            <th
              class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-700 dark:text-gray-300"
            >
              Quỹ
            </th>
            <th
              class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-700 dark:text-gray-300"
            >
              Loại quỹ
            </th>
            <th
              class="px-6 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-700 dark:text-gray-300"
            >
              NAV
            </th>
            <th
              class="sortable-header cursor-pointer px-6 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-700 transition-colors hover:text-orange-600 dark:text-gray-300 dark:hover:text-orange-400"
              data-sort-field="navTo1Months"
            >
              <div class="inline-flex items-center gap-1">
                <span>1 tháng</span>
                <span class="sort-indicator opacity-0">
                  <svg
                    class="h-4 w-4"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M7 11l5-5m0 0l5 5m-5-5v12"></path>
                  </svg>
                </span>
              </div>
            </th>
            <th
              class="sortable-header cursor-pointer px-6 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-700 transition-colors hover:text-orange-600 dark:text-gray-300 dark:hover:text-orange-400"
              data-sort-field="navTo12Months"
            >
              <div class="inline-flex items-center gap-1">
                <span>1 năm</span>
                <span class="sort-indicator opacity-0">
                  <svg
                    class="h-4 w-4"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M7 11l5-5m0 0l5 5m-5-5v12"></path>
                  </svg>
                </span>
              </div>
            </th>
            <th
              class="sortable-header cursor-pointer px-6 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-700 transition-colors hover:text-orange-600 dark:text-gray-300 dark:hover:text-orange-400"
              data-sort-field="navTo36Months"
            >
              <div class="inline-flex items-center gap-1">
                <span>3 năm</span>
                <span class="sort-indicator opacity-0">
                  <svg
                    class="h-4 w-4"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M7 11l5-5m0 0l5 5m-5-5v12"></path>
                  </svg>
                </span>
              </div>
            </th>
            {
              showActionCol && (
                <th class="px-6 py-3 text-center text-xs font-medium uppercase tracking-wider text-gray-700 dark:text-gray-300">
                  Hành động
                </th>
              )
            }
          </tr>
        </thead>
        <tbody
          class="funds-tbody divide-y divide-gray-200 bg-white dark:divide-gray-700 dark:bg-gray-900"
        >
          <!-- Fund rows will be inserted here -->
        </tbody>
      </table>
    </div>

    <div class="mt-4 text-center text-sm text-gray-600 dark:text-gray-400">
      Hiển thị <span class="funds-count font-semibold">0</span> quỹ
    </div>
  </div>
</div>

<style>
  .filter-btn {
    background-color: transparent;
    border: 2px solid #e5e7eb;
    color: #6b7280;
  }

  .dark .filter-btn {
    border-color: #374151;
    color: #9ca3af;
  }

  .filter-btn.active {
    background-color: #f97316;
    border-color: #f97316;
    color: white;
  }

  .filter-btn:hover:not(.active) {
    border-color: #f97316;
    color: #f97316;
  }

  .dark .filter-btn:hover:not(.active) {
    border-color: #fb923c;
    color: #fb923c;
  }

  .sortable-header.active {
    color: #f97316;
  }

  .dark .sortable-header.active {
    color: #fb923c;
  }

  .sortable-header .sort-indicator {
    transition:
      opacity 0.2s,
      transform 0.2s;
  }

  .sortable-header.active .sort-indicator {
    opacity: 1;
  }

  .sortable-header.desc .sort-indicator {
    transform: rotate(180deg);
  }
</style>

<script>
  import type {
    FundData,
    FundAssetFilter,
    FundApiResponse,
  } from '../types/fund';
  import {
    fetchFunds,
    formatPercentage,
    formatCurrencyVND,
    formatDate,
  } from '../utils/fundApi';

  interface FundPerformanceElement extends HTMLDivElement {
    _initialized?: boolean;
  }

  function initializeFundPerformance() {
    const containers = document.querySelectorAll<FundPerformanceElement>(
      '.fund-performance-container'
    );

    containers.forEach((container) => {
      if (container._initialized) return;
      container._initialized = true;

      const initialFilter =
        (container.dataset.initialFilter as FundAssetFilter) || 'ALL';
      const pageSize = parseInt(container.dataset.pageSize || '20', 10);
      const showActionCol = container.dataset.showActionCol === 'true';

      const filterBtns =
        container.querySelectorAll<HTMLButtonElement>('.filter-btn');
      const sortableHeaders =
        container.querySelectorAll<HTMLTableCellElement>('.sortable-header');
      const loadingState =
        container.querySelector<HTMLDivElement>('.loading-state');
      const errorState =
        container.querySelector<HTMLDivElement>('.error-state');
      const errorMessage =
        container.querySelector<HTMLParagraphElement>('.error-message');
      const fundsContainer =
        container.querySelector<HTMLDivElement>('.funds-container');
      const fundsTbody =
        container.querySelector<HTMLTableSectionElement>('.funds-tbody');
      const fundsCount =
        container.querySelector<HTMLSpanElement>('.funds-count');

      let currentFilter: FundAssetFilter = initialFilter;
      let currentFunds: FundData[] = [];
      let sortField: 'navTo1Months' | 'navTo12Months' | 'navTo36Months' =
        'navTo12Months';
      let sortDirection: 'asc' | 'desc' = 'desc';

      // Set initial active filter
      filterBtns.forEach((btn) => {
        if (btn.dataset.filter === currentFilter) {
          btn.classList.add('active');
        }
        btn.addEventListener('click', () => {
          currentFilter = btn.dataset.filter as FundAssetFilter;
          filterBtns.forEach((b) => b.classList.remove('active'));
          btn.classList.add('active');
          loadFunds();
        });
      });

      // Set up sortable headers
      sortableHeaders.forEach((header) => {
        header.addEventListener('click', () => {
          const field = header.dataset.sortField as
            | 'navTo1Months'
            | 'navTo12Months'
            | 'navTo36Months';
          if (field === sortField) {
            sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
          } else {
            sortField = field;
            sortDirection = 'desc';
          }
          updateSortIndicators();
          renderFunds();
        });
      });

      function updateSortIndicators() {
        sortableHeaders.forEach((header) => {
          const field = header.dataset.sortField;
          if (field === sortField) {
            header.classList.add('active');
            if (sortDirection === 'desc') {
              header.classList.add('desc');
            } else {
              header.classList.remove('desc');
            }
          } else {
            header.classList.remove('active', 'desc');
          }
        });
      }

      async function loadFunds() {
        if (
          !loadingState ||
          !errorState ||
          !fundsContainer ||
          !fundsTbody ||
          !fundsCount ||
          !errorMessage
        )
          return;

        // Show loading state
        loadingState.classList.remove('hidden');
        errorState.classList.add('hidden');
        fundsContainer.classList.add('hidden');

        try {
          const fundAssetTypes = currentFilter === 'ALL' ? [] : [currentFilter];
          const response: FundApiResponse = await fetchFunds({
            fundAssetTypes: fundAssetTypes as any,
            pageSize,
          });

          currentFunds = response.data?.rows || [];

          // Show funds container
          loadingState.classList.add('hidden');
          fundsContainer.classList.remove('hidden');

          // Update sort indicators and render
          updateSortIndicators();
          renderFunds();
        } catch (error) {
          console.error('Error loading funds:', error);
          loadingState.classList.add('hidden');
          errorMessage.textContent =
            error instanceof Error
              ? error.message
              : 'Không thể tải dữ liệu quỹ. Vui lòng thử lại sau.';
          errorState.classList.remove('hidden');
        }
      }

      function sortFunds(funds: FundData[]): FundData[] {
        return [...funds].sort((a, b) => {
          const aValue = a.productNavChange?.[sortField];
          const bValue = b.productNavChange?.[sortField];

          // Handle N/A values - put them at the end
          if (aValue === undefined || aValue === null) {
            if (bValue === undefined || bValue === null) return 0;
            return 1; // a goes after b
          }
          if (bValue === undefined || bValue === null) {
            return -1; // b goes after a
          }

          // Compare actual values
          const diff = aValue - bValue;
          return sortDirection === 'desc' ? -diff : diff;
        });
      }

      function renderFunds() {
        if (!fundsTbody || !fundsCount) return;

        const sortedFunds = sortFunds(currentFunds);
        fundsTbody.innerHTML = sortedFunds
          .map((fund) => createFundRow(fund))
          .join('');
        fundsCount.textContent = currentFunds.length.toString();
      }

      function createFundRow(fund: FundData): string {
        const fundAssetTypeCode = fund.dataFundAssetType?.code || 'OTHER';
        const fundTypeLabel = getFundTypeLabel(fundAssetTypeCode);
        const navTo1Months = fund.productNavChange?.navTo1Months;
        const navTo12Months = fund.productNavChange?.navTo12Months;
        const navTo36Months = fund.productNavChange?.navTo36Months;
        const navDate = fund.productNavChange?.updateAt;
        const issuerName = fund.owner?.name || fund.shortName;

        const performanceClass = (value: number | undefined) => {
          if (!value) return '';
          return value > 0
            ? 'text-green-600 dark:text-green-400'
            : 'text-red-600 dark:text-red-400';
        };

        return `
          <tr class="hover:bg-gray-50 dark:hover:bg-gray-800">
            <td class="px-6 py-4">
              <div class="flex items-center">
                <div>
                  <div class="font-medium text-gray-900 dark:text-white">${fund.code}</div>
                  <div class="text-sm text-gray-500 dark:text-gray-400">${issuerName}</div>
                </div>
              </div>
            </td>
            <td class="px-6 py-4">
              <span class="inline-flex rounded-full px-2 py-1 text-xs font-semibold ${getFundTypeBadgeClass(fundAssetTypeCode)}">
                ${fundTypeLabel}
              </span>
            </td>
            <td class="px-6 py-4 text-right">
              <div class="font-medium text-gray-900 dark:text-white">${formatCurrencyVND(fund.nav)}</div>
              <div class="text-xs text-gray-500 dark:text-gray-400">${formatDate(navDate)}</div>
            </td>
            <td class="px-6 py-4 text-right font-semibold ${performanceClass(navTo1Months)}">
              ${formatPercentage(navTo1Months)}
            </td>
            <td class="px-6 py-4 text-right font-semibold ${performanceClass(navTo12Months)}">
              ${formatPercentage(navTo12Months)}
            </td>
            <td class="px-6 py-4 text-right font-semibold ${performanceClass(navTo36Months)}">
              ${formatPercentage(navTo36Months)}
            </td>
            ${
              showActionCol
                ? `
            <td class="px-6 py-4 text-center">
              <a
                href="https://go.behitek.com/fmarket"
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center rounded-lg bg-orange-500 px-4 py-2 text-sm font-medium text-white transition-colors hover:bg-orange-600 dark:bg-orange-600 dark:hover:bg-orange-700"
              >
                Mua
              </a>
            </td>
            `
                : ''
            }
          </tr>
        `;
      }

      function getFundTypeLabel(type: string): string {
        const labels: Record<string, string> = {
          BOND: 'Trái phiếu',
          STOCK: 'Cổ phiếu',
          BALANCED: 'Cân bằng',
          OTHER: 'Khác',
        };
        return labels[type] || type;
      }

      function getFundTypeBadgeClass(type: string): string {
        const classes: Record<string, string> = {
          BOND: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300',
          STOCK:
            'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300',
          BALANCED:
            'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300',
          OTHER:
            'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300',
        };
        return classes[type] || classes.OTHER;
      }

      // Initial load
      loadFunds();
    });
  }

  // Initialize on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeFundPerformance);
  } else {
    initializeFundPerformance();
  }

  // Re-initialize when navigating (for Astro view transitions)
  document.addEventListener('astro:page-load', initializeFundPerformance);
</script>
